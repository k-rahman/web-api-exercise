openapi: 3.0.0
info:
  title: Kirpputori
  description: Platform For Selling And Buying Used Items
  version: 1.0.0
  contact:
    name: Karim
servers:
  - url: 'http://192.168.1.7:3200'
    description: Development Server
  - url: 'https://kirppu-tori.herokuapp.com'
    description: Production server
paths:
  /items:
    get:
      operationId: 'GET:kirpputori/items'
      description: return all items
      tags:
        - items
      parameters:
        - in: query
          name: keyword
          description: Filter items based on keyword
          required: false
          schema:
            type: string
            example: used cars
        - in: query
          name: category
          description: Filter items by category
          required: false
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Books
              icon:
                type: string
                example: bookshelf
        - in: query
          name: country
          description: Filter items by country
          required: false
          schema:
            type: string
            example: Finland
        - in: query
          name: city
          description: Filter items by city
          required: false
          schema:
            type: string
            example: Oulu
        - in: query
          name: from
          description: Date of posting
          required: false
          schema:
            type: string
            format: date
            example: '2021-01-01'
        - in: query
          name: to
          description: Date of posting
          required: false
          schema:
            type: string
            format: date
            example: '2021-10-01'
      responses:
        '200':
          description: Returns a list of all items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: 'POST:kirpputori/items'
      description: Create a new item
      tags:
        - items
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ItemData'
      responses:
        '201':
          description: New item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  '/items/{itemId}':
    get:
      operationId: 'GET:kirpputori/items/itemId'
      description: Return item by Id
      tags:
        - item
      parameters:
        - in: path
          name: itemId
          description: Id of the selected item
          required: true
          schema:
            type: integer
            example: 244
      responses:
        '200':
          description: Return item by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: 'PUT:kirpputori/item/itemId'
      description: Update item by Id
      tags:
        - item
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
            example: 34
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ItemData'
      responses:
        '204':
          description: Item was updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: 'DELETE:kirpputori/items/itemId'
      description: Delete item by Id
      tags:
        - item
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
            example: 34
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Item was deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /items/me:
    get:
      description: Return all user items
      operationId: 'GET:kirpputori/items/me'
      tags:
        - user's items
      security:
        - bearerAuth: [] 
      responses:
        '200':
          description: Returns a list of all users items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'  
          
  /categories:
    get:
      description: Return all items' categories
      operationId: 'GET:kirpputori/categories'
      tags:
        - cat
      
      responses:
        '200':
          description: Returned all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 4
                    name:
                      type: string
                      example: cars
                    icon:
                      type: string
                      example: 44.jpg
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /deliveryTypes:
    get:
      description: Return all items' delivery types
      operationId: 'GET:kirpputori/deliveryTypes'
      tags:
        - delivery
      responses:
        '200':
          description: Returned all delivery types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 2
                    name:
                      type: string
                      example: pickup
                    icon:
                      type: string
                      example: 4.jpg
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /register:
    post:
      operationId: 'POST:kirpputori/users/register'
      description: Create a new user
      tags:
        - register
      requestBody:
        $ref: '#/components/requestBodies/UserData'
      responses:
        '201':
          description: New user was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/UnexpectedError'
      summary: ''

  /auth:
    post:
      operationId: 'POST:kirpputori/users/auth'
      description: Login a user
      tags:
        - login
      security:
        - basicAuth: []
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsDGTYR6IkpXVCJ9.eyJ1c2VySWQiOjQsImlhdCI6MTYOPUD9930.5JLBykylMfEiP4afph07S8FqqhUYI57W8k_bAADFFYTs
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
      
  /users/me:
    get:
      description: Return information about the user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
      operationId: 'GET:kirpputori/users'
      tags:
        - users
    put:
      description: Update an existing user information
      operationId: 'PUT:kirpputori/users'
      tags:
        - users
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserData'
      responses:
        '204':
          description: Request was successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      description: Remove user from the system
      operationId: 'DELETE:kirpputori/users'
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Request was successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'


components:
  requestBodies:
    ItemData:
      description: Item information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Item'
    UserData:
      description: User information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The submitted data is incorrect
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Error'
              - $ref: '#/components/schemas/JsonSchemaValidation'
    UnauthorizedError:
      description: Invalide username or password/ Access token invalid or missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: User isn't authorized to preform action on the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Internal Server Error
      content:
        text/plain:
          schema:
            type: string
            example: Internal Server Error
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Item:
      type: object
      required:
        - title
        - description
        - price
        - country
        - city
        - categoryId
        - deliveryTypeId
        - images
      properties:
        id:
          type: integer
          readOnly: true
          example: 10
        title:
          type: string
          example: used VW 2010
        description:
          type: string
          example: Selling VW car in good condition
        price:
          type: number
          format: float
          example: 5500.5
        country:
          type: string
          example: Finland
        city:
          type: string
          example: Oulu
        sellerName:
          type: string
          readOnly: true
          example: Juhani Metsa
        contactInfo:
          type: string
          format: phonenumber
          readOnly: true
          example: 0447777774
        images:
          oneOf:
            - type: array
              writeOnly: true
              items:
                type: string
                format: binary
            - type: array
              readOnly: true
              items:
                type: string
        category:
          type: object
          properties:
            id:
              type: string
              example: 1
            name:
              type: string
              example: Books
            icon:
              type: string
              example: bookshelf
          readOnly: true
        categoryId:
          type: string
          writeOnly: true
          example: '1'
        deliveryType:
          type: object
          properties:
            id:
              type: string
              example: 1
            name:
              type: string
              example: Pickup
            icon:
              type: string
              example: null
          readOnly: true
        deliveryTypeId:
          type: string
          writeOnly: true
          example: '1'
        createdAt:
          type: string
          format: datetime
          description: creation date
          readOnly: true
          example: '2021-01-30 17:41:05'
        updatedAt:
          type: string
          format: datetime
          description: updating date
          readOnly: true
          example: '2021-01-30 17:41:05'
      x-examples:
        example-1:
          id: 10
          title: used VW 2010
          description: Selling VW car in good condition
          price: 5500.5
          country: Finland
          city: Oulu
          sellerName: Juhani Metsa
          contactInfo: 044-777-7774
          images: [vwcar1.jpg, vwcar2.jpg,vwcar3.jpg,vwcar4.jpg]
          category: cars
          deliveryType: pickup
          createdAt: '2021-01-30 17:41:05'
          updatedAt: '2021-01-30 17:41:05'
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 23
        firstname:
          type: string
          minLength: 1
          example: John
        lastname:
          type: string
          minLength: 1
          example: Smith
        email:
          type: string
          minLength: 1
          format: email
          example: john.smith@mail.com
        password:
          type: string
          format: password
          minLength: 5
          writeOnly: true
          example: johnsmithpassword
        phone:
          type: string
          minLength: 12
          format: phonenumber
          example: 0447777777
      x-examples:
        example-1:
          id: 23
          firstname: John
          lastname: Smith
          email: john.smith@mail.com
          phone: 0447777777
    UserId:
      type: object
      properties:
        userId:
          type: integer
          example: 4
      x-examples:
        example-1:
          userId: 4
    ItemId:
      type: object
      properties:
        itemId:
          type: integer
          example: 5
      x-examples:
        example-1:
          itemId: 5
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      x-examples:
        example-1:
          code: string
          message: string
    JsonSchemaValidation:
      type: array
      items:
        type: string
tags:
  - name: login
  - name: category
  - name: delivery
  - name: items
  - name: item
  - name: register
  - name: users
