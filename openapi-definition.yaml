openapi: 3.0.0
info:
  title: Kirpputori
  description: Platform For Selling And Buying Used Items
  version: 1.0.0
servers: 
    - url: http://192.168.1.7:3200
      description: Development Server
    - url: https://kirppu-tori.herokuapp.com/
      description: Production server
  

paths:
  /items:
    get: #get all items
      parameters:
        - in: query
          name: keyword
          description: Filter items based on keyword
          required: false
          schema:
            type: string
            example: used cars
        - in: query
          name: category
          description: Filter items by category
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: country
          description: Filter items by country
          required: false
          schema:
            type: string
            example: Finland
        - in: query
          name: city
          description: Filter items by city
          required: false
          schema:
            type: string
            example: Oulu
        - in: query
          name: date
          description: Date of posting
          required: false
          schema:
            type: string
            format: date
            example: "2020-10-23"
      responses:
        '200':
          description: Returns a list of all items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post: #post a new item
      security: 
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ItemData'
      responses:
        '201':
          description: New item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
          
  /items/{itemId}: 
    get: #get an item by id
      parameters: 
        - in: path
          name: itemId
          description: Id of the selected item
          required: true
          schema:
            type: integer
            example: 244
      responses:
        '200':
          description: Return item by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put: #update an item by id
      parameters: 
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
            example: 34
      security: 
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ItemData'
      responses:
        '204':
          description: Item was updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete: #delete an item by id
      parameters: 
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
            example: 34
      security: 
        - bearerAuth: []
      responses:
        '204':
          description: Item was deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  
  /categories: 
    get:  #return categories
      description: Return all items' categories
      responses:
        '200':
          description: Returned all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    categoryId:
                      type: integer
                      example: 4
                    name:
                      type: string
                      example: cars
                    icon:
                      type: string
                      example: 44.jpg
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    
  /deliveryTypes: 
    get:  #return deliveryTypes
      description: Return all items' delivery types
      responses:
        '200':
          description: Returned all delivery types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    deliveryTypeId:
                      type: integer
                      example: 2
                    name:
                      type: string
                      example: pickup
                    icon:
                      type: string
                      example: 4.jpg
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  
  /register:
    post: #register a new user
      requestBody:
        $ref: '#/components/requestBodies/UserData'
      responses:
        '201':
          description: New user was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/UnexpectedError'
          
  /auth:
    post: #login user
      security: 
        - basicAuth: []
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsDGTYR6IkpXVCJ9.eyJ1c2VySWQiOjQsImlhdCI6MTYOPUD9930.5JLBykylMfEiP4afph07S8FqqhUYI57W8k_bAADFFYTs
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/UnexpectedError'
          
  /users/me:
    get: #get user info
      description: Return information about the user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put: #update existing user
      description: Update an existing user information
      security: 
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserData'
      responses:
        '204':
          description: Request was successful
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete: #delete existing user
      description: Remove user from the system
      security: 
      - bearerAuth: []
      responses:
        '204':
          description: Request was successful
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        
        
components:
  requestBodies:
    ItemData:
      description: Item information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Item'
    UserData:
      description: User information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
            
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    BadRequest:
      description: The submitted data is incorrect
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Error'
              - $ref: '#/components/schemas/JsonSchemaValidation'
    
    UnauthorizedError:
      description: Invalide username or password/ Access token invalid or missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    Forbidden:
      description: User isn't authorized to preform action on the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    UnexpectedError:
      description: Internal Server Error
      content:
        text/plain:
          schema:
            type: string
            example: Internal Server Error
    
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    Item:
      type: object
      required: 
        - title
        - description
        - price
        - country
        - city
        - categoryId
        - deliveryTypeId
        - images
      properties:
        itemId:
          type: integer
          readOnly: true
          example: 10
        title:
          type: string
          example: used VW 2010
        description:
          type: string
          example: Selling VW car in good condition
        price:
          type: number
          format: float
          example: 5500.50
        country:
          type: string
          example: Finland
        city:
          type: string
          example: Oulu
        sellerName:
          type: string
          readOnly: true
          example: Juhani Metsa
        contactInfo:
          type: string
          format: phonenumber
          readOnly: true
          example: 044-777-7774
        img1:
          type: string
          description: the image name as stored in the database
          readOnly: true
          example: vwcar1.jpg
        img2:
          type: string
          readOnly: true
          example: vwcar2.jpg
        img3:
          type: string
          readOnly: true
          example: vwcar3.jpg
        img4:
          type: string
          readOnly: true
          example: vwcar4.jpg
        images:
          type: array
          writeOnly: true
          items:
            type: string
            format: binary
        category:
          type: string
          readOnly: true
          example: cars
        categoryId:
          type: string
          writeOnly: true
          example: 1
        deliveryType:
          type: string
          readOnly: true
          example: pickup
        deliveryTypeId:
          type: string
          writeOnly: true
          example: 1
        createdAt:
          type: string
          format: datetime
          description: creation date
          readOnly: true
          example: "2021-01-30 17:41:05"
        updatedAt:
          type: string
          format: datetime
          description: updating date
          readOnly: true
          example: "2021-01-30 17:41:05"
            
    User:
      type: object
      properties:
        userId:
          type: integer
          readOnly: true
          example: 23
        firstname:
          type: string
          minLength: 1
          example: John
        lastname:
          type: string
          minLength: 1
          example: Smith
        email:
          type: string
          minLength: 1
          format: email
          example: 'john.smith@mail.com'
        password:
          type: string
          format: password
          minLength: 5
          writeOnly: true
          example: johnsmithpassword
        phone:
          type: string
          minLength: 12
          format: phonenumber
          example: 044-777-7777
          
    UserId:
      type: object
      properties:
        userId:
          type: integer
          example: 4
          
    ItemId:
      type: object
      properties:
        itemId:
          type: integer
          example: 5
          
    Error: # Schema for error response body
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
        
    JsonSchemaValidation:
      type: array
      items:
        type: string